When would you want to use a remote repository rather than keeping all your work local?

    It would be useful having a remote repository when looking to backup or dealing with a project that has multiple 
    persons editing the document. When there is an online repository it becomes easier for persons to make changes 
    that can then be easily shared with other persons working on the project. Or in the case of a backup it can be 
    useful to always have a repository to call back to incase something were to happen to the files saved locally.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with 
your remote repository?

    Some changes made locally could have broken some functionality which could have gone unnoticed. By not having 
    these changes automatically pushed, it allows for an east rollback by pulling the changed file or files from 
    the repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

    A fork is the cloning of a repository on Github. This is unique to Github repositories only.
    Cloning of a repository creates a copy of that repository on a local machine from either another local 
    repository or an online source.
    A branch is a a copy of items within a repository making it easy to make changes that can be undone. If the 
    changes produce the desired effect then it can be added to the main code usually without much effort.
    When you want to make changes to someone's repository on Github then you should fork it. If you want to make 
    local changes to a repository then it is best to clone it to your machine. If you want to add a new feature or 
    fix a bug in your code, then you should create a new branch so you dont introduce or create more bugs in your 
    main working code. These changes can always be merged or discarded later.

What is the benefit of having a copy of the last known state of the remote stored locally?

    Its useful as it allows you to know what the last state of your repository was. If you have made substantial 
    changes in your local repository and seek to push them you may create conflicts. This information would allow 
    you to stage your workflow and see what the last known changes are in the cloud and what is available locally.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

    Could collaborate by sending the actual files and explain where changes were made. While it is possible to 
    collaborate without GitHub, it is not as efficient.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each 
approach have?

    This would allow for the master branch to remain operational without the risk of having a product or service 
    experience bugs that could cause disruptions. Changes made on a separate branch, if working as intended, 
    could be pulled into the master branch when done. All of this would be completed without braking the main branch.

